02_16_16
COEN 146 Computer Networks

Multiplexing/Demultiplexing

UDP -> small header
TCP -> big header
  - handles lots more data
  - Reliable connection between sending and receiving data

Byzantine Generals

Triple modular redundancy
  - 3 modules, take a vote

LAYER 4 TRANSPORT PROTOCOLS

Connection Release
  - two army problem
  - look at time

UDP
  - treat network connection like a file

Remote Procedure Call
  - interface to remote host
  - looks like a local function

Need to know min and max sizes

Real-Time Transport Protocol
  - specify a certain rate at which you want data to be sent at
  - attempt to acheive a certain data rate
    = need to control what happens with lost packets
    = how long do you wait for a timeout, etc.
  - build on top of udp

TCP - Service Model
  - Many different protocols/services - FTP, telnet, etc.

TCP Segment header
  - sequence numbers
  - variable length
  - Checksum
    - header + extra data (that isn't there -> pseudoheader)
  - TCP built on top of IP, requires IP to work in a particular way
    = datagram service
  - Start at 0? -> 0-9, 0-... 16 in a sequnce, wrap around
    = start talking after saying hello
  - packet that includes sync flag sent to 1, say what first sequence number is
    = "Hi, 12" "Hello, 13" -> acknowledged, waiting for sequence #13
  - Window size
    = How tcp handles congestion
    = Set limits on how much data gets sent/received
      - but how much should be taken advantage of?
      - when do you send? Timeout? When is it worth sending?

Congestion control
  - prevents you from transmitting too fast a rate
    = window size
  - back off
    = you don't know if it is internal congestion or small capacity reciever

Slow Start protocol
  - Increase bandwidth until you hit the wall, die and go back
    = take previous threshold and halve it
    = quickly get to a high data rate, then approach the wall slowly

Sequnce number range?
